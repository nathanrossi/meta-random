From 0698fbfd2e44feb5feadd754bc02c37160c6e6c5 Mon Sep 17 00:00:00 2001
From: Nathan Rossi <nathan@nathanrossi.com>
Date: Sat, 21 Aug 2021 22:46:07 +1000
Subject: [PATCH] WIP

---
 .../devicetree/bindings/net/dsa/marvell.txt         |  2 ++
 drivers/net/dsa/mv88e6xxx/port.c                    |  2 ++
 drivers/net/dsa/mv88e6xxx/smi.c                     | 13 +++++++++++++
 3 files changed, 17 insertions(+)

diff --git a/Documentation/devicetree/bindings/net/dsa/marvell.txt b/Documentation/devicetree/bindings/net/dsa/marvell.txt
index 30c11fea49..afc3109225 100644
--- a/Documentation/devicetree/bindings/net/dsa/marvell.txt
+++ b/Documentation/devicetree/bindings/net/dsa/marvell.txt
@@ -41,6 +41,8 @@ Optional properties:
 			  switch. Must be set if the switch can not detect
 			  the presence and/or size of a connected EEPROM,
 			  otherwise optional.
+- single-chip-address	: Force use of single chip addressing, regardless of
+			  the MII address assigned for the node.
 - mdio			: Container of PHY and devices on the switches MDIO
 			  bus.
 - mdio?		: Container of PHYs and devices on the external MDIO
diff --git a/drivers/net/dsa/mv88e6xxx/port.c b/drivers/net/dsa/mv88e6xxx/port.c
index f77e2ee64a..e9139bacd3 100644
--- a/drivers/net/dsa/mv88e6xxx/port.c
+++ b/drivers/net/dsa/mv88e6xxx/port.c
@@ -723,9 +723,11 @@ int mv88e6341_port_set_cmode(struct mv88e6xxx_chip *chip, int port,
 		break;
 	}
 
+	/* HACK: broken set writable on 88e6141?
 	err = mv88e6341_port_set_cmode_writable(chip, port);
 	if (err)
 		return err;
+	*/
 
 	return mv88e6xxx_port_set_cmode(chip, port, mode, true);
 }
diff --git a/drivers/net/dsa/mv88e6xxx/smi.c b/drivers/net/dsa/mv88e6xxx/smi.c
index 282fe08db0..b47b4d9a9f 100644
--- a/drivers/net/dsa/mv88e6xxx/smi.c
+++ b/drivers/net/dsa/mv88e6xxx/smi.c
@@ -163,6 +163,19 @@ static const struct mv88e6xxx_bus_ops mv88e6xxx_smi_indirect_ops = {
 int mv88e6xxx_smi_init(struct mv88e6xxx_chip *chip,
 		       struct mii_bus *bus, int sw_addr)
 {
+	struct device_node *np = chip->dev->of_node;
+
+	if (np) {
+		/*
+		 * Determine if the switch should always be accessed in single
+		 * address mode regardless of mdio device address
+		 */
+		if (of_property_read_bool(np, "single-chip-address")) {
+			dev_info(chip->dev, "Using single chip addressing mode");
+			sw_addr = 0;
+		}
+	}
+
 	if (chip->info->dual_chip)
 		chip->smi_ops = &mv88e6xxx_smi_dual_direct_ops;
 	else if (sw_addr == 0)
-- 
2.33.0

